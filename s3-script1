import cv2
import numpy as np
import os, sys, time
from utils.drawmatches import drawMatches

# Add the root path (the path above this one) to the pythonpath.
sys.path.insert(0,'*****') 

gray1= cv2.cvtColor(im1=cv2.imread('*****.jpg'),cv2.COLOR_BGR2GRAY) # img en b&n guardada en gray
gray2= cv2.cvtColor(im2=cv2.imread('*****.jpg'),cv2.COLOR_BGR2GRAY) # img en b&n guardada en gray


sift = cv2.SIFT()
kp1,des1 = sift.detectAndCompute(gray1,None) # los detectamos y computamos a la vez
kp2,des2 = sift.detectAndCompute(gray2,None) 

img1=cv2.drawKeypoints(gray1,kp1,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
# dibuja en nuestra imagen en b&n los puntos de interes kp en forma de circulos del
# tamaño del punto con el 'flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS'
img2=cv2.drawKeypoints(gray2,kp2,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

imshow(img1)
imshow(img2)

cv2.imwrite('puntos1.jpg',img1) # guarda la imagen anterior como '.jpg'
cv2.imwrite('puntos2.jpg',img2)

bf = cv2.BFMatcher()
matches = bf.match(des1,des2)
matches = sorted(matches,key=lambda val: val.distance)
# compara los descriptores de los puntos de interes de ambas imagenes 
print len(matches) # mirar el nº de matches

comp = drawMatches(gray1, kp1, gray2, kp2, matches[:20]) # dibuja hasta x puntos unidos entre ambas imagenes en b&n

imshow(comp) # mostramos el resultado
show()
